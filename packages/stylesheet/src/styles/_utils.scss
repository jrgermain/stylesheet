@use "sass:string";
@use "sass:list";

// Adapted from https://css-tricks.com/snippets/sass/str-replace-function/
@function replace-all($string, $search, $replace) {
  $index: string.index($string, $search);

  @if $index {
    /* stylelint-disable-next-line scss/operator-no-newline-after */
    @return string.slice($string, 1, $index - 1) + $replace +
      replace-all(
        string.slice($string, $index + string.length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

@function svg-to-data-url($svg) {
  $svg: replace-all($svg, "%", "%25");
  $svg: replace-all($svg, '"', "'");
  $svg: replace-all($svg, "#", "%23");
  $svg: replace-all($svg, "<", "%3C");
  $svg: replace-all($svg, ">", "%3E");
  $svg: replace-all($svg, "[", "%5B");
  $svg: replace-all($svg, "]", "%5D");
  $svg: replace-all($svg, "^", "%5E");
  $svg: replace-all($svg, "`", "%60");
  $svg: replace-all($svg, "{", "%7B");
  $svg: replace-all($svg, "|", "%7C");
  $svg: replace-all($svg, "}", "%7D");

  // The below characters are tolerated by browsers, so don't NEED to be escaped:
  // $svg: replace-all($svg, " ", "%20");
  // $svg: replace-all($svg, "!", "%21");
  // $svg: replace-all($svg, "$", "%24");
  // $svg: replace-all($svg, "&", "%26");
  // $svg: replace-all($svg, "'", "%27");
  // $svg: replace-all($svg, "(", "%28");
  // $svg: replace-all($svg, ")", "%29");
  // $svg: replace-all($svg, "*", "%2A");
  // $svg: replace-all($svg, "+", "%2B");
  // $svg: replace-all($svg, ",", "%2C");
  // $svg: replace-all($svg, "-", "%2D");
  // $svg: replace-all($svg, ".", "%2E");
  // $svg: replace-all($svg, "/", "%2F");
  // $svg: replace-all($svg, ":", "%3A");
  // $svg: replace-all($svg, ";", "%3B");
  // $svg: replace-all($svg, "=", "%3D");
  // $svg: replace-all($svg, "?", "%3F");
  // $svg: replace-all($svg, "@", "%40");
  // $svg: replace-all($svg, "\\", "%5C");
  // $svg: replace-all($svg, "_", "%5F");
  // $svg: replace-all($svg, "~", "%7F");

  @return 'url("data:image/svg+xml,#{$svg}")';
}

@mixin transition($properties, $duration: 200ms, $timing-function: "ease") {
  $properties-string: "";

  @if type-of($properties) != list and type-of($properties) != string {
    @error 'Properties must be a string or list of strings';
  }

  @each $property in $properties {
    @if $properties-string != "" {
      $properties-string: $properties-string + ", ";
    }

    $properties-string: $properties-string + $property;
  }

  @if list.length($properties) == 1 {
    transition: #{string.unquote($properties-string)}
      $duration
      #{string.unquote($timing-function)};
  }

  @if list.length($properties) > 1 {
    transition-property: string.unquote($properties-string);
    transition-duration: $duration;
    transition-timing-function: string.unquote($timing-function);
  }
}
