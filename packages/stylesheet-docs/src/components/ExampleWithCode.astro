---
import { formatCode } from "../utils/format-code";
import CodeBlock, { type Language } from "./CodeBlock.astro";

interface Props {
  code: string;
  language: Language;
  outputWrapperClass?: string;
  outputWrapperId?: string;
}

const { code, language, outputWrapperClass, outputWrapperId } = Astro.props;
const formattedCode = await formatCode(code);
---

<div class="example-wrapper" x-data="{ showCode: false }">
  <div
    id={outputWrapperId}
    class:list={["example-output", outputWrapperClass]}
    set:html={formattedCode}
  />
  <div class="example-code">
    <CodeBlock variant="inline" code={formattedCode} language={language} />
  </div>
  <div class="example-code-toggle-toolbar">
    <label class="switch small show-example-code">
      Show Code
      <input type="checkbox" x-model="showCode" />
    </label>
  </div>
</div>

<style>
  .example-wrapper {
    display: flex;
    flex-direction: column;
    background-color: var(--color-body-alt);
    border: var(--border-s) solid var(--color-outline);
    border-radius: var(--radius-s);
  }

  .example-output {
    padding: var(--space-s);
    max-width: 100%;
    overflow-x: auto;
    overflow-y: hidden;
  }

  .example-code {
    overflow-y: hidden;
    max-height: 0;
    transition: max-height 250ms ease;
  }

  @media (prefers-reduced-motion) {
    .example-code {
      transition: none;
    }
  }

  .example-code:has(~ .example-code-toggle-toolbar input:checked) {
    max-height: 100svh;
  }

  .example-code-toggle-toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-top: var(--border-s) solid var(--color-outline);
    padding: var(--space-2xs);
  }

  .show-example-code {
    width: auto;
    margin-inline-start: auto;
  }
</style>
