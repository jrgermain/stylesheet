---
import ComponentDocs from "../../components/ComponentDocs.astro";
import ComponentOption from "../../components/ComponentOption.astro";

const exampleCode = `
<!-- For this example, we've defined a global variable '$dialog' pointing to the dialog element. -->

<button class="button" onclick="$dialog.showModal()">
  Open Dialog
</button>

<dialog id="dialog1">
  <header class="dialog-header">
    <h1>Leave Without Saving?</h1>
    <button class="close button" onclick="$dialog.close()"></button>
  </header>
  <div class="dialog-body">
    <p>You have unsaved edits. What would you like to do?</p>
  </div>
  <div class="dialog-footer">
    <button class="primary red button" onclick="$dialog.close()">
      Discard Changes
    </button>
    <button autofocus class="button" onclick="$dialog.close()">
      Keep Editing
    </button>
  </div>
</dialog>
`;
---

<ComponentDocs name="Dialog" exampleCode={exampleCode}>
  <ComponentOption name="Size">
    <Fragment slot="details">
      <p>
        A dialog can optionally have a <strong>size</strong>, which controls the
        maximum width of the dialog. If the contents of the dialog are small,
        then the dialog might not take up the whole width it is allowed.
      </p>
      <p>To set the size of a dialog, add one of the following classes:</p>
      <ul>
        <li><code>small</code></li>
        <li><code>medium</code></li>
        <li><code>large</code></li>
      </ul>
      <p>
        If you don't add any of the above, the dialog will be as wide as
        necessary to fit the content without extending past the edge of the
        screen.
      </p>
    </Fragment>
    <Fragment slot="examples">
      <div x-data="{ size: '' }">
        <div class="stack" style={{ alignItems: "flex-end" }}>
          <label class="field">
            Size
            <select x-model="size">
              <option value="">(Unset)</option>
              <option value="small">Small</option>
              <option value="medium">Medium</option>
              <option value="large">Large</option>
            </select>
          </label>
          <button class="button" onclick="$dialog2.showModal()">
            Open Dialog</button
          >
        </div>

        <dialog id="dialog2" x-bind:class="size">
          <header class="dialog-header">
            <h1>This is a <span x-text="size"></span> dialog</h1>
            <button class="close button" onclick="$dialog2.close()"></button>
          </header>
          <div class="dialog-body">
            <p>
              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
              eiusmod tempor incididunt ut labore et dolore magna aliqua. Duis
              ultricies lacus sed turpis tincidunt id. Rhoncus mattis rhoncus
              urna neque viverra justo nec.
            </p>
            <p>
              Pretium nibh ipsum consequat nisl vel pretium lectus quam. Ac
              placerat vestibulum lectus mauris ultrices. Elementum sagittis
              vitae et leo duis ut diam. Odio facilisis mauris sit amet massa.
              Cras semper auctor neque vitae tempus quam. Cursus metus aliquam
              eleifend mi in. Fermentum iaculis eu non diam. Diam quam nulla
              porttitor massa id neque aliquam
            </p>
          </div>
        </dialog>
      </div>
    </Fragment>
  </ComponentOption>
  <ComponentOption name="Drawer">
    <Fragment slot="details">
      <p>
        A dialog can optionally be displayed as a <strong>drawer</strong>. In
        this case, it is docked to one side of the screen and takes the whole
        height (if docked to the side) or width (if docked to the top or
        bottom).
      </p>
      <p>
        To turn a dialog into a drawer, add the class <code>drawer</code>, along
        with the side of the screen the drawer should slide out from. Valid
        sides are:
      </p>
      <ul>
        <li><code>left</code></li>
        <li><code>right</code></li>
        <li><code>top</code></li>
        <li><code>bottom</code></li>
      </ul>
      <p>
        Drawers also support the same <strong>size</strong> classes as normal dialogs.
      </p>
    </Fragment>
    <Fragment slot="examples">
      <div x-data="{ side: 'left', size: '' }">
        <div class="stack" style={{ alignItems: "flex-end" }}>
          <label class="field">
            Side
            <select x-model="side">
              <option value="left">Left</option>
              <option value="right">Right</option>
              <option value="top">Top</option>
              <option value="bottom">Bottom</option>
            </select>
          </label>
          <label class="field">
            Size
            <select x-model="size">
              <option value="">(Unset)</option>
              <option value="small">Small</option>
              <option value="medium">Medium</option>
              <option value="large">Large</option>
            </select>
          </label>
          <button class="button" onclick="$drawer.showModal()"
            >Open Drawer</button
          >
        </div>

        <dialog id="drawer1" x-bind:class="'drawer ' + side + ' ' + size">
          <header class="dialog-header">
            <h1>Account Settings</h1>
            <button class="close button" onclick="$drawer.close()"></button>
          </header>

          <div class="dialog-body dense vertical stack">
            <label class="field">
              Account Number
              <input readonly value="123894848339" />
            </label>
            <label class="field">
              Nickname
              <input autofocus value="Personal Savings" />
            </label>
            <hr />
            <div class="warning alert">
              You've made <strong>4</strong> outbound transfers from this account
              this month. If you make more than 6 outbound transfers in a calendar
              month, you will be charged a fee of <strong>$5.00</strong> as outlined
              in <a>savings account fees</a>.
            </div>
          </div>
        </dialog>
      </div>
    </Fragment>
  </ComponentOption>
</ComponentDocs>
<script is:inline>
  window.$dialog = document.getElementById("dialog1");
  window.$dialog2 = document.getElementById("dialog2");
  window.$drawer = document.getElementById("drawer1");
</script>
