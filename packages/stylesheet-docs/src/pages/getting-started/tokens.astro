---
import { Code } from "astro:components";
import Layout from "../../layouts/Layout.astro";
import { marked } from "marked";
import { trimMarkdownPadding } from "../../utils/trim-markdown-padding";
import MarkdownChunk from "../../components/MarkdownChunk.astro";
import SemanticColor from "../../components/tokens-page/SemanticColor.astro";

const colors = [
  "brand",
  "red",
  "orange",
  "yellow",
  "green",
  "sky",
  "blue",
  "purple",
  "magenta",
  "gray",
];

const shades = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
---

<Layout title="Tokens">
  <MarkdownChunk
    content={`
      # Tokens

      All design tokens are defined as CSS Custom Properties (also known as "CSS
      Variables"). You should reference these properties when creating custom
      styles.

      This page walks through each type of token and shows examples of what each
      value looks like.

      ## Colors

      All colors are prefixed with \`--color-\`. The stylesheet defines 2 sets
      of colors: the **standard palette** and **semantic colors**.

      ### Standard Palette

      The stylesheet defines multiple shades for each of the following colors:
      \`brand\`, \`red\`, \`orange\`, \`yellow\`, \`green\`, \`sky\`, \`blue\`,
      \`purple\`, \`magenta\`, and \`gray\`.

      There are 9 shades for each color, ranging from 1 to 9. Lower numbers will
      have the most contrast with the page background, while higher numbers will
      have the least. In other words, shade 1 is the darkest shade in light mode,
      but the lightest shade in dark mode.

      There are also 2 transparent variants for each color: \`transparent\` and
      \`extra-transparent\`.

      The variables for these colors all use the standard \`--color-\` prefix,
      followed by the color name and shade. For example, the color \`red\` with
      lightness 1 is defined as \`--color-red-1\`, while \`red\` with high
      transparency is defined as \`--color-red-extra-transparent\`. Below is an
      example of how to reference these colors in a stylesheet:
    `}
  />
  <hr class="divider invisible" />
  <Code
    code=".red {\n  background-color: var(--color-red-1);\n}\n\n.transparent-red {\n  background-color: var(--color-red-extra-transparent);\n}"
    lang="css"
  />
  <hr class="divider invisible" />
  <p class="paragraph">
    Below are samples of all the colors in shades 1 through 9:
  </p>
  <div class="colors-container">
    {
      colors.map((color) => (
        <div class="color-row">
          {shades.map((suffix) => (
            <span
              class="cell"
              style={{
                background: `var(--color-${color}-${suffix})`,
                color:
                  suffix < "6"
                    ? `var(--color-${color}-9)`
                    : `var(--color-${color}-1)`,
              }}
            >
              {suffix}
            </span>
          ))}
          <span class="color-name" style={{ color: `var(--color-${color}-9)` }}>
            {color}
          </span>
        </div>
      ))
    }
  </div>
  <MarkdownChunk
    content={`
      ### Semantic Colors

      In addition to the standard palette, the stylesheet defines a set of
      "semantic" colors. These colors are named after their intended use cases:
    `}
  />
  <SemanticColor name="body">
    the primary background color for the document
  </SemanticColor>
  <SemanticColor name="body-alt">
    the secondary backgroud color, used on surfaces like cards
  </SemanticColor>
  <SemanticColor name="body-text">
    the primary text color for the document
  </SemanticColor>
  <SemanticColor name="body-text-alt">
    the secondary text color for the document
  </SemanticColor>
  <SemanticColor name="shadow">
    a transparent gray used for box shadows
  </SemanticColor>
  <SemanticColor name="outline">
    a gray used for borders and outlines
  </SemanticColor>
  <p class="paragraph">
    Unlike standard palette colors, these don't come in multiple shades.
  </p>

  <MarkdownChunk
    content={`
      ## Shadows

      The variables for shadows are all prefixed with \`--shadow-\`. They are
      designed to be used with the \`box-shadow\` property and are given T-shirt
      sizes describing how large the shadow should be.
    `}
  />
  <br class="divider invisible" />
  <div class="sparser vertical stack">
    {
      ["none", "s", "m", "l", "xl"].map((size) => (
        <div class="box" style={{ boxShadow: `var(--shadow-${size})` }}>
          shadow-{size}
        </div>
      ))
    }
  </div>

  <MarkdownChunk
    content={`
      ## Font Sizes

      The variables for font sizes are all prefixed with \`--font-size-\`, which
      is followed by a T-shirt size between \`xs\` and \`4xl\`. For example, the
      font size \`m\` represents a medium size for text and can be referenced as
      \`--font-size-m\`.
    `}
  />
  <br class="divider invisible" />
  <div class="card vertical stack">
    {
      ["xs", "s", "m", "l", "xl", "2xl", "3xl", "4xl"].map((size) => (
        <div style={{ fontSize: `var(--font-size-${size})` }}>
          This text has a size of <em>{size}</em>.
        </div>
      ))
    }
  </div>

  <h2 class="heading-2">Font Weights</h2>
  <p class="paragraph">
    The variables for font weights are all prefixed with <code class="code"
      >--font-weight-</code
    >. For example, the font weight <code class="code">normal</code> can be referenced
    as <code class="code">--font-weight-normal</code>.
  </p>
  <div class="card">
    {
      ["light", "normal", "semibold", "bold", "black"].map((weight) => (
        <p style={{ fontWeight: `var(--font-weight-${weight})` }}>
          This text has a weight of <em>{weight}</em>.
        </p>
      ))
    }
  </div>

  <h2 class="heading-2">Font Families</h2>
  <p class="paragraph">
    The variables for font families are all prefixed with <code class="code"
      >--font-family-</code
    >. For example, the font family <code class="code">body</code> can be referenced
    as <code class="code">--font-family-body</code>.
  </p>
  <div class="card">
    {
      ["body", "heading", "mono"].map((family) => (
        <p style={{ fontFamily: `var(--font-family-${family})` }}>
          This text has a font family of <em>{family}</em>.
        </p>
      ))
    }
  </div>

  <h2 class="heading-2">Spacing</h2>
  <p class="paragraph">
    Spacing tokens scale with the screen width, becoming slightly more spread
    out as the screen widens. The variables for spacing are prefixed with <code
      class="code">--space-</code
    > and are implemented as T-shirt sizes between 3xs and 3xl.
  </p>
  <p class="paragraph">
    There's also a token called <code class="code">space-body</code> that scales
    from <code class="code">xs</code> on small screens to <code class="code"
      >m</code
    > on large screens. This token is used for the margins around the app.
  </p>
  <div class="card">
    {
      ["3xs", "2xs", "xs", "s", "m", "l", "xl", "2xl", "3xl"].map((space) => (
        <>
          <span>{space}</span>
          <div class="space-example">
            <div class="space-example-block" />
            <div
              class="space-example-spacer"
              style={{ width: `var(--space-${space})` }}
            />
            <div class="space-example-block" />
          </div>
        </>
      ))
    }
  </div>

  <h2 class="heading-2">Radii</h2>
  <p class="paragraph">
    The variables for radii are all prefixed with <code class="code"
      >--radius-</code
    >. They're designed to be used with the <code class="code"
      >border-radius</code
    > property.
    <div class="flow">
      {
        ["none", "s", "m", "l", "xl", "2xl", "full"].map((radius) => (
          <div
            class="box"
            style={{
              height: "10rem",
              borderColor: "var(--color-brand-5)",
              borderWidth: "var(--border-m)",
              borderRadius: `var(--radius-${radius})`,
            }}
          >
            radius-{radius}
          </div>
        ))
      }
    </div>

    <h2 class="heading-2">Border Widths</h2>
    <p class="paragraph">
      The variables for border widths are all prefixed with <code class="code"
        >--border-</code
      >. They're designed to be used with the <code class="code"
        >border-width</code
      > property.
      <div class="flow">
        {
          ["none", "s", "m", "l", "xl"].map((border) => (
            <div
              class="box"
              style={{
                borderColor: "var(--color-brand-5)",
                borderWidth: `var(--border-${border})`,
              }}
            >
              border-{border}
            </div>
          ))
        }
      </div>
    </p>
  </p>
</Layout>
<style>
  h1 {
    margin-block-start: 0 !important;
  }
  /* Colors */
  .colors-container {
    max-width: 100%;
    overflow-x: auto;
  }
  .color-row {
    position: relative;
    display: grid;
    grid-template-columns: repeat(9, 1fr);
    gap: 0;
    width: auto;
    margin-block-end: auto;
    max-width: 72rem;
  }

  .color-row .color-name {
    position: absolute;
    left: 4px;
    bottom: 4px;
    font-family: var(--font-family-heading);
    font-size: var(--font-size-xl);
    font-weight: var(--font-weight-bold);
    text-transform: uppercase;
  }

  .color-row .cell {
    display: flex;
    align-items: start;
    justify-content: end;
    min-width: 5rem;
    max-width: 8rem;
    aspect-ratio: 1;
    width: 100%;
    padding: 4px;
    font-size: var(--font-size-s);
    margin: 0;
  }

  /* Shadows */
  .box {
    border: var(--border-s) solid var(--color-outline);
    height: 4rem;
    width: 12rem;
    font-family: var(--font-family-mono);
    border-radius: var(--radius-m);
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--color-body-alt);
  }

  .space-example {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-items: center;
    margin-block-end: var(--space-s);
  }

  .space-example-block {
    display: inline-block;
    height: 1.5rem;
    width: 1.5rem;
    background-color: var(--color-body-text);
    flex: none;
    background-color: var(--color-blue-5);
  }

  .space-example-block:not(:first-child) {
    background-color: var(--color-red-5);
  }

  .space-example-spacer {
    display: inline-block;
    position: relative;
    height: var(--border-s);
    background-color: var(--color-body-text);
    flex: none;
    margin: auto 0;
  }
</style>
